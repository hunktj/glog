package glog

import (
	"fmt"
	"os"
	"path"
	"time"
)

// Filelogger 日志写入文件的结构体
type Filelogger struct {
	level    Level
	filePath string
	fileName string
	File     *os.File //os包中的file类型指针
	errFile  *os.File
}

//NewFileLog 是一个生成文件日志结构体的构造函数 初始化日志文件
func NewFileLog(logFilePath, logFileName string) *Filelogger {
	fl := &Filelogger{
		filePath: logFilePath,
		fileName: logFileName,
	}
	fl.initFile() // 根据上面的文件路径和文件名打开文件日志
	return fl
}

//初始化文件日志文件句柄
func (f *Filelogger) initFile() {
	logName := path.Join(f.filePath, f.fileName)
	//打开文件
	fileObj, err := os.OpenFile(logName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		panic(fmt.Errorf("open file:%s,%v failed", logName, err))
	}
	f.File = fileObj
	errLogName := fmt.Sprintf("%s.err", logName)
	//打开错误日志文件
	errFileObj, err := os.OpenFile(logName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		panic(fmt.Errorf("open file:%s,%v failed", errLogName, err))
	}
	f.File = errFileObj
}

//Debug 日志
func (f *Filelogger) Debug(format string, args ...any) {
	//往文件写日志 格式化 时间，级别，文件的函数，行数，日志信息
	//往文件写日志 [2022-10-15 17:09:23] main.go [14] [DEBUG]....日志信息：id为10的用户一直在尝试登录
	if f.level > LEVEL_DEBUG {
		return
	}
	msg := fmt.Sprintf(format, args...)
	funcName, fileName, lineNum := getCallerInfo(2)
	nowTimeStr := time.Now().Format("[2006-01-02 15:04:05.000]")
	logMsg := fmt.Sprintf("%s  level:[%s] func:[%s：%s] num:%d, %s", nowTimeStr, "Debug", funcName, fileName, lineNum, msg)
	fmt.Fprintln(f.File, logMsg)
	//fmt.Fprintln(f.File) //加换行

}
func (f *Filelogger) Info(format string, args ...any) {
	//往文件写日志
	msg := fmt.Sprintf(format, args...)
	funcName, fileName, lineNum := getCallerInfo(2)
	nowTimeStr := time.Now().Format("[2006-01-02 15:04:05.000]")
	logMsg := fmt.Sprintf("%s  level:[%s] func:[%s：%s] num:%d, %s", nowTimeStr, "Info", funcName, fileName, lineNum, msg)
	fmt.Fprintln(f.File, logMsg)

}
func (f *Filelogger) Error(msg string) {
	//往文件写日志
	f.File.WriteString(msg)

}
